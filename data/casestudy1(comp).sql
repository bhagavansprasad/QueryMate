--Case Study 1
create database casestudy1
use casestudy1

select * from product
select * from fact
select * from location

--1. Display the number of states present in the Location Table.
select count(distinct state)as count_states from location

--2. How many products are of regular type?
select count(product)as count_product from product where 
type='regular'

--3. How much spending has been done on marketing of product ID 1.
select sum(marketing) as total_spend from fact where productid=1

--4. What is the minimum sales of a product?
select min(sales)as min_sales from fact

--5. Display the max Cost of Good Sold (COGS).
select max(cogs)as max_cogs from fact

--6. Display the details of the product where product type is coffee.
select * from product where product_type='coffee'

--7. Display the details where total expenses are greater than 40.
select * from fact where total_expenses >40

--8. What is the average sales in area code 719?
select avg(sales)as avg_sales from fact where area_code=719

--9. Find out the total profit generated by Colorado state.
select sum(profit)as total_profit from fact f inner join location l
on f.area_code=l.area_code where state='colorado'

--10. Display the average inventory for each product ID.
select productid,avg(inventory) avg_inventory from fact group by productid
order by productid

--11. Display state in a sequential order in a Location Table.
select * from location order by state 

--12. Display the average budget of the Product where the average budget
--margin should be greater than 100.
select productid,avg(budget_margin)as avgerage from fact group by productid
having avg(budget_margin)>100 order by productid

--13. What is the total sales done on date 2010-01-01?
select sum(sales) total_sales from fact where date='2010-01-01'

--14. Display the average total expense of each product ID on an individual date.
select productid,date,avg(total_expenses) as avg_exp from fact
group by productid,date order by productid,date

--15. Display the table with the following attributes 
--such as date, productID, product_type, product, sales, 
--profit, state, area_code

select f.date,f.productid,p.product_type,p.product,f.sales,f.profit,l.state,
l.area_code from fact f join product p on f.productid=p.productid join location l
on f.area_code=l.area_code

--16. Display the rank without any gap to show the sales wise rank
select sales,dense_rank() over(order by sales asc)as sales_wise_rank from fact

--17. Find the state wise profit and sales.
select state,sum(profit)as Total_profit,sum(sales)as Total_Sales from fact f
join location l on f.area_code=l.area_code group by state

--18. Find the state wise profit and sales along with the productname.
select product,state,sum(profit)as Total_profit,sum(sales)as Total_Sales from fact f
join location l on f.area_code=l.area_code join product p on p.productid=f.productid
group by product,state

--19. If there is an increase in sales of 5%, calculate the increasedsales.
select sales,sales*1.05 as Increased_sales from fact

--20. Find the maximum profit along with the product ID and producttype.
select p.productid,p.product_type,max(profit)as maximum_profit from fact f join
product p on f.productid=p.productid group by p.productid,p.product_type


--21. Create a stored procedure to fetch the result according to 
--the product typefrom Product Table.
create procedure p @pt varchar(50)
as
select * from product where product_type=@pt;

exec p @pt='tea'
exec p @pt='coffee'

--22. Write a query by creating a condition in which if the total expenses is less than60 
--then it is a profit or else loss.
select total_expenses,iif(total_expenses<60,'Profit','Loss')as Status
 from fact

 --23. Give the total weekly sales value with the date 
 --and product IDdetails. Useroll-up to pull the data in hierarchical order.
 select date,productid,sum(sales) week_sales,datepart(Week,date)as Week from fact
 group by datepart(Week,date),date,productid with rollup;

 --24. Apply union and intersection operator on the tables which consist of
--attribute area code.
select area_code from fact
union 
select area_code from location

select area_code from fact
intersect
select area_code from location

--25. Create a user-defined function for the product table to fetch a particular
--product type based upon the user’s preference.
create function pr(@pt1 varchar(50))
returns table
as
return select * from product where product_type=@pt1

select * from pr('tea')

--26. Change the product type from coffee to tea where product ID is 1 and undoit.
begin transaction
update product set product_type='tea' where productid=1
rollback transaction

--27. Display the date, product ID and sales where total expenses are
--between 100 to 200.
select date,productid,sales,total_expenses from fact
where total_expenses between 100 and 200

--28. Delete the records in the Product Table for regular type
delete from product where type='regular'

--29. Display the ASCII value of the fifth character from the columnProduct.
select ascii('B')
SELECT substring('bhavika',4,1)

select product,ascii(substring(product,5,1))as ASCII_VALUE from product





